#
# 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
#
# 
# @param nums int整型一维数组 
# @return int整型
#
"""
描述
你是一个经验丰富的小偷，准备偷沿湖的一排房间，每个房间都存有一定的现金，为了防止被发现，你不能偷相邻的两家，即，如果偷了第一家，就不能再偷第二家，如果偷了第二家，那么就不能偷第一家和第三家。沿湖的房间组成一个闭合的圆形，即第一个房间和最后一个房间视为相邻。
给定一个长度为n的整数数组nums，数组中的元素表示每个房间存有的现金数额，请你计算在不被发现的前提下最多的偷窃金额。

数据范围：数组长度满足 1 \le n \le 2\times10^5 \1≤n≤2×10 
5
  ，数组中每个值满足 1 \le nums[i] \le 5000 \1≤nums[i]≤5000 

解析
存在循环，因此可以分两种情况设置,1. 偷取第一家, 不偷最后一家, 2.不偷第一家， 偷最后一家
"""
class Solution:
    def rob(self , nums: List[int]) -> int:
        # write code here
        
        n = len(nums)
        
        dp = [0]*(n+1)
        
        # 存在循环，因此可以分两种情况设置,偷取第一家, 不偷最后一家
        dp[1] = nums[0]
        
        for i in range(2, n):
            dp[i] = max(dp[i-1], dp[i-2]+nums[i-1])
        
        res1 = dp[n-1]
        
        # 不偷第一家， 偷最后一家
        dp[1] = 0
        
        for i in range(2, n+1):
            dp[i] = max(dp[i-1], dp[i-2]+nums[i-1])
            
        return max(res1, dp[n])
        
        